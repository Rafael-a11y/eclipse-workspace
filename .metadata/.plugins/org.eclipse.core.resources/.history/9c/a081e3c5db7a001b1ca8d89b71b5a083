package br.com.abc.javacore.ZZMcompletablefuture.classes;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;

public class Loja {
	public double getPreco() {
		//Vai pegar onde Judas bateu as botas.
		return calcularPreco();
	}
	public Future<Double> getPrecoAsync(){
		CompletableFuture<Double> precoFuturo = new CompletableFuture<Double>();
		new Thread(() -> {precoFuturo.complete(calcularPreco());}).start();
		return precoFuturo;
	}
	private double calcularPreco() {
		System.out.println(1 / 0);
		delay();
		return ThreadLocalRandom.current().nextDouble() * 100;
	}
	private static void delay() {
		try {
			TimeUnit.SECONDS.sleep(2);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
}
