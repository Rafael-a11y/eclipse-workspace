package br.com.abc.javacore.ZZKstreams.test;

import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import br.com.abc.javacore.ZZKstreams.classes.Pessoa;

public class StreamTest6Collectors1 {

	public static void main(String[] args) {
//		Redução e sumarização de Streams em um valor único.
		List<Pessoa> pessoas = Pessoa.bancoDePessoas();
		System.out.println(pessoas.stream().count());
//		Não aceita reference method, poois a função collect não espera uma lambda, reference method e lambdas devem ter como
//		destino uma interface funcional, exemplo: Supplier, Consumer...
//		Contando o número de elementos presentes na lista.
		System.out.println(pessoas.stream().collect(Collectors.counting()));
//		Capturando o valor máximo. Tome cuidado, a IDE Eclipse não sugere os métodos ao tentar escrever lambda
		Optional<Pessoa> max = pessoas.stream().max(Comparator.comparing(Pessoa::getSalario));
		System.out.println(max.get().getSalario());
		
		Optional<Pessoa> collect = pessoas.stream().collect(Collectors.maxBy(Comparator.comparing(Pessoa::getSalario)));
		System.out.println(collect.get().getSalario());
		
		Optional<Pessoa> collect1 = pessoas.stream().collect(Collectors.minBy(Comparator.comparing(Pessoa::getSalario)));
		System.out.println(collect1.get().getSalario());
		
			
				
	}

}
